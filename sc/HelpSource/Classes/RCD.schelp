TITLE:: RCD
summary:: rotating clock divider
categories:: UGens>Triggers
related:: Classes/PulseDivider, Classes/CoinGate

DESCRIPTION::
A rotating clock divider based on eurorack module 'RCD' by 4ms (Original author: Dan Green).
link::https://4mscompany.com/rcd.php?c=5::.
RCD produces eight divided clock tempos from a single input clock.


CLASSMETHODS::

METHOD:: ar

ARGUMENT:: clock
clock input, like gates or triggers

ARGUMENT:: rotate
pattern rotation to redistribute clock divisions.

ARGUMENT:: reset
trigger or gate input to reset

ARGUMENT:: div
clock divisions: 0: div8, 1: div16, 2: div32, 3: div64

ARGUMENT:: spread
spread mode on/off (0/1). Spread mode causes the output to "spread" evenly amongst the entire max division range.

ARGUMENT:: auto
auto reset flag (0/1), resets after count reached max count.

ARGUMENT:: len
set max count (for auto reset).

ARGUMENT:: down
down beat flag (0/1), specifies that each clock fires when it's count is 1 (when reset, all clocks fire!). Otherwise (down = 0) clocks fire after N number of pulses are counted.

ARGUMENT:: gate
gate mode flag (0/1), if on, output gates, if off, output pulses of the same length as the input clock.

returns:: eight trigger/gate outputs



EXAMPLES::

code::
{ RCD.ar( LFPulse.ar(20, width: 0.1)) }.plot(1)



(
{
	var freqs =  Array.fill( 8, { |i| (i+1)*100 } );
	var decays =  Array.fill( 8, { |i| 8.0/(i+1) } );
	var trig = LFPulse.ar(5, width: 0.005);
	var rotate = LFNoise0.kr(0.3).range(0, 16);
	var reset = 0;
	var spread = 1;

	var pulses = RCD.ar( trig, rotate, reset, 3, spread);
	var out = Ringz.ar( pulses, freqs, decays, 0.05);
	Splay.ar(out, 0.5) + Ringz.ar(trig, 6000, 0.01, 0.01);

}.play
)


// auto-reset on ...
(
{
	var freqs =  Array.fill( 8, { |i| (i+1)*100 } );
	var decays =  Array.fill( 8, { |i| 1.0/(i+1) } );
	var trig = LFPulse.ar(8, width: 0.001);
	var rotate = 7;
	var spread = 1;
	var len = 23;

	var pulses = RCD.ar( trig, rotate, 0, 0, spread, 1, len );
	var out = Ringz.ar( pulses, freqs, decays, 0.05);
	Splay.ar(out, 0.5);
}.play
)

// ... and off
(
{
	var freqs =  Array.fill( 8, { |i| (i+1)*100 } );
	var decays =  Array.fill( 8, { |i| 1.0/(i+1) } );
	var trig = LFPulse.ar(8, width: 0.001);
	var rotate = 7;
	var spread = 1;

	var pulses = RCD.ar( trig, rotate, 0, 0, spread, 0, );
	var out = Ringz.ar( pulses, freqs, decays, 0.05);
	Splay.ar(out, 0.5);
}.play
)

::
